import { generateText } from "ai";
import { openai } from "@ai-sdk/openai";
import { storeProducts } from "./store";
import {
    generateProductNormalizationExamples,
    generatePaymentInstructions,
    generateAddressInstructions,
    generateMenuList,
    numberExamples
} from "./normalizationUtils";

type Product = {
    name: string;
    quantity: number;
};

type Address = {
    street: string;
    number: number;
    neighboorhood: string;
};

type PaymentMethod = 'pix' | 'money' | 'credit' | 'debit' | 'VR' | 'VA';

type OrderResult = {
    products: Product[];
    address: Address;
    payment: PaymentMethod;
    totalPrice: number;
};

// Mapeamento de emojis para produtos
const productEmojis: { [key: string]: string } = {
    'Temaki': 'üç£',
    'Sashimi': 'üêü',
    'Uramakis': 'üç£',
    'Hot Roll': 'üç£',
    'Hot Fry': 'üî•',
    'Rolinho': 'üç´',
    'Refrigerante': 'ü•§',
    'H2oh': 'üíß',
    'Suco': 'ü•§',
    '√Ågua': 'üíß',
    'Mini Sushi': 'üç£',
    'Niguiri': 'üç£',
    'Combo': 'üç±'
};

function getProductEmoji(productName: string): string {
    for (const [key, emoji] of Object.entries(productEmojis)) {
        if (productName.includes(key)) return emoji;
    }
    return 'üçΩÔ∏è'; // Emoji padr√£o para produtos n√£o mapeados
}

function formatOrderLog(products: Product[]): string {
    if (products.length === 0) return '';

    // Agrupa produtos por tipo
    const groupedProducts = products.reduce((acc, product) => {
        const emoji = getProductEmoji(product.name);
        if (!acc[emoji]) acc[emoji] = [];
        acc[emoji].push(product);
        return acc;
    }, {} as { [key: string]: Product[] });

    // Formata a mensagem
    const productDescriptions = Object.entries(groupedProducts).map(([emoji, prods]) => {
        const descriptions = prods.map(p => {
            if (p.quantity === 1) return p.name.toLowerCase();
            return `${p.quantity} ${p.name.toLowerCase()}`;
        });
        return `${descriptions.join(', ')} ${emoji.repeat(prods.length)}`;
    });

    const formattedProducts = productDescriptions.join(' ');
    
    // Escolhe uma mensagem aleat√≥ria para o in√≠cio
    const messages = [
        'Seu pedido foi anotado e ser√° entregue em breve:',
        'Ser√° entregue em breve:',
        'Pedido confirmado:',
        'Seu pedido:'
    ];
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    
    return `${randomMessage} ${formattedProducts}`;
}

function calculateTotalPrice(products: Product[]): number {
    return products.reduce((total, product) => {
        const storeProduct = storeProducts.find(p => p.name === product.name);
        if (!storeProduct) throw new Error(`Produto n√£o encontrado: ${product.name}`);
        return total + (product.quantity * storeProduct.price);
    }, 0);
}

export async function structurize(userMessage: string): Promise<OrderResult | null> {
    try {
        // Gera o prompt dinamicamente
        const prompt = `Voc√™ √© um assistente especializado em extrair e normalizar informa√ß√µes de pedidos de delivery.
            
            Sua tarefa √© extrair e normalizar as informa√ß√µes do pedido, garantindo que:
            1. Os nomes dos produtos sejam EXATAMENTE iguais aos do card√°pio (incluindo espa√ßos, acentos e par√™nteses)
            2. Os n√∫meros por extenso sejam convertidos para n√∫meros
            3. Os endere√ßos sejam normalizados
            4. As formas de pagamento sejam normalizadas
            
            CARD√ÅPIO (use EXATAMENTE estes nomes, sem altera√ß√µes):
            ${generateMenuList()}

            REGRAS DE NORMALIZA√á√ÉO:
            1. Produtos:
               - Use EXATAMENTE os nomes do card√°pio, sem altera√ß√µes
               - Exemplos de normaliza√ß√£o:
            ${generateProductNormalizationExamples(storeProducts.map(p => p.name))}
               - IMPORTANTE: N√£o adicione, remova ou altere palavras dos nomes dos produtos
               - IMPORTANTE: N√£o use abrevia√ß√µes ou tradu√ß√µes

            2. Endere√ßos:
            ${generateAddressInstructions()}
               - Converter n√∫meros por extenso para n√∫meros:
            ${numberExamples}

            3. Pagamento:
            ${generatePaymentInstructions()}

            IMPORTANTE:
            1. Use EXATAMENTE os nomes dos produtos do card√°pio, sem altera√ß√µes
            2. Mantenha os espa√ßos, acentos e par√™nteses exatamente como mostrados
            3. N√£o adicione ou remova palavras dos nomes dos produtos
            4. N√£o altere a ordem das palavras nos nomes dos produtos
            5. N√£o use abrevia√ß√µes nos nomes dos produtos
            6. N√£o normalize ou altere os nomes dos produtos de forma diferente dos exemplos
            7. Use EXATAMENTE os nomes normalizados dos endere√ßos, sem altera√ß√µes

            Retorne APENAS um objeto JSON com as informa√ß√µes normalizadas, sem nenhum texto adicional.
            Exemplo de retorno:
            {
                "products": [{"name": "Temaki de Salm√£o", "quantity": 2}],
                "address": {"street": "Avenida das Flores", "number": 123, "neighboorhood": "Centro"},
                "payment": "credit"
            }`;

        const { text: structuredData } = await generateText({
            model: openai("gpt-4.1-mini"),
            system: prompt,
            prompt: userMessage
        });

        // Parse the LLM response
        const parsedData = JSON.parse(structuredData);

        // Calculate total price
        const totalPrice = calculateTotalPrice(parsedData.products);

        // Formata e exibe o log do pedido
        const orderLog = formatOrderLog(parsedData.products);
        console.log(orderLog);

        return {
            products: parsedData.products,
            address: parsedData.address,
            payment: parsedData.payment,
            totalPrice
        };
    } catch (error) {
        console.error('Erro ao processar o pedido:', error);
        return null;
    }
}